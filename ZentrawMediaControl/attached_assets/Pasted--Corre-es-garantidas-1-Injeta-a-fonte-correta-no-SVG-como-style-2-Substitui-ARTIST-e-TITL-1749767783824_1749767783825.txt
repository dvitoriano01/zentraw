‚úÖ Corre√ß√µes garantidas:
‚úÖ 1. Injeta a fonte correta no SVG como <style>
‚úÖ 2. Substitui ARTIST e TITLE mesmo se estiverem dentro de <tspan> ou textNode, recursivamente
‚úÖ 3. Aplica a font-family e fill for√ßadamente a todos os <text> e <tspan>
üîÅ Substitua completamente seu bloco dentro de applyTemplate por este:
tsx
Copiar
Editar
const applyTemplate = async () => {
  if (!selectedTemplate || !canvasLayoutRef.current) return;

  try {
    const baseImageSrc = exportedImages[0]?.url || imageIA || uploadedCover;
    if (!baseImageSrc) {
      toast({ title: "Imagem n√£o encontrada", description: "Gere ou envie uma imagem de capa antes", variant: "destructive" });
      return;
    }

    const baseImg = new Image();
    baseImg.crossOrigin = 'anonymous';
    await new Promise((res, rej) => {
      baseImg.onload = res;
      baseImg.onerror = rej;
      baseImg.src = baseImageSrc;
    });

    // Parse SVG
    const parser = new DOMParser();
    const svgDoc = parser.parseFromString(selectedTemplate.svg, 'image/svg+xml');
    const svgRoot = svgDoc.documentElement;

    // Font settings
    const fontObj = [...customFonts, ...baseFonts].find(f => f.name === selectedFont);
    const fontFormat = fontObj?.ext === 'ttf' ? 'truetype' :
                       fontObj?.ext === 'otf' ? 'opentype' :
                       fontObj?.ext === 'woff2' ? 'woff2' : 'woff';
    const fontBase64 = fontObj?.base64;

    if (fontBase64) {
      const styleEl = svgDoc.createElementNS("http://www.w3.org/2000/svg", "style");
      styleEl.textContent = `
        @font-face {
          font-family: '${selectedFont}';
          src: url(data:font/${fontObj.ext};base64,${fontBase64}) format('${fontFormat}');
        }
        text, tspan {
          font-family: '${selectedFont}' !important;
          fill: ${textColor} !important;
        }
      `;
      svgRoot.insertBefore(styleEl, svgRoot.firstChild);
    }

    // Substitui placeholders inclusive recursivo em <tspan>
    const replaceTextNodes = (node: Node) => {
      if (node.nodeType === Node.TEXT_NODE) {
        node.textContent = node.textContent?.replace(/ARTIST/g, formData.artistName || 'ARTIST')
                                            .replace(/TITLE/g, formData.songTitle || 'TITLE');
      }
      node.childNodes.forEach(replaceTextNodes);
    };

    svgRoot.querySelectorAll('text').forEach((el) => {
      replaceTextNodes(el);
      el.setAttribute('font-family', selectedFont);
      el.setAttribute('fill', textColor);
    });

    svgRoot.querySelectorAll('tspan').forEach((el) => {
      replaceTextNodes(el);
      el.setAttribute('font-family', selectedFont);
      el.setAttribute('fill', textColor);
    });

    // Serializa SVG e converte para imagem
    const svgString = new XMLSerializer().serializeToString(svgRoot);
    const svgBlob = new Blob([svgString], { type: 'image/svg+xml' });
    const svgUrl = URL.createObjectURL(svgBlob);

    const svgImg = new Image();
    svgImg.crossOrigin = 'anonymous';
    await new Promise((res, rej) => {
      svgImg.onload = res;
      svgImg.onerror = rej;
      svgImg.src = svgUrl;
    });

    // Desenha tudo no canvas
    const canvas = canvasLayoutRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) throw new Error('Canvas context not found');
    canvas.width = 1080;
    canvas.height = 1080;
    ctx.clearRect(0, 0, 1080, 1080);
    ctx.drawImage(baseImg, 0, 0, 1080, 1080);
    ctx.drawImage(svgImg, 0, 0, 1080, 1080);

    // Preview final
    canvas.toBlob((blob) => {
      if (blob) {
        const url = URL.createObjectURL(blob);
        setFinalLayoutImage(url);
        toast({ title: 'Template aplicado!', description: 'Texto e fonte atualizados com sucesso' });
      }
    }, 'image/png');

    URL.revokeObjectURL(svgUrl);

  } catch (err: any) {
    console.error('Erro ao aplicar template:', err);
    toast({ title: 'Erro', description: err.message || 'Erro desconhecido', variant: 'destructive' });
  }
};
‚úÖ O que esperar ap√≥s substituir:
As fontes Freepik e carregadas via Supabase funcionar√£o 100%.

O texto nos templates como "ARTIST" e "TITLE" ser√° substitu√≠do corretamente, mesmo em SVGs complexos.

O resultado ser√° renderizado corretamente no canvas final com preview atualizado.