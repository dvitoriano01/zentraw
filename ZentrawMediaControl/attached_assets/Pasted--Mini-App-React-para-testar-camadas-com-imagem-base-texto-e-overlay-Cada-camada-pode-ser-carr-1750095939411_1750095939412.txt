// Mini App React para testar camadas com imagem base, texto e overlay
// Cada camada pode ser carregada separadamente, manipulada e exportada

import React, { useRef, useState } from 'react';

export default function CamadaDeTestePreview() {
  const canvasRef = useRef(null);
  const [baseImage, setBaseImage] = useState(null);
  const [textSvg, setTextSvg] = useState(null);
  const [overlaySvg, setOverlaySvg] = useState(null);

  const [showBase, setShowBase] = useState(true);
  const [showText, setShowText] = useState(true);
  const [showOverlay, setShowOverlay] = useState(true);

  const [blendBase, setBlendBase] = useState('normal');
  const [blendText, setBlendText] = useState('normal');
  const [blendOverlay, setBlendOverlay] = useState('normal');

  const [alphaBase, setAlphaBase] = useState(1);
  const [alphaText, setAlphaText] = useState(1);
  const [alphaOverlay, setAlphaOverlay] = useState(1);

  const [scaleBase, setScaleBase] = useState(1);
  const [scaleText, setScaleText] = useState(1);
  const [scaleOverlay, setScaleOverlay] = useState(1);

  const [textReplacers, setTextReplacers] = useState({ ARTIST: 'ARTIST', TITLE: 'TITLE' });

  const handleImageUpload = (e, type) => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => {
      if (type === 'base') setBaseImage(reader.result);
      if (type === 'text') setTextSvg(reader.result);
      if (type === 'overlay') setOverlaySvg(reader.result);
    };
    reader.readAsDataURL(file);
  };

  const drawLayer = async (ctx, src, options = {}) => {
    const img = new Image();
    img.crossOrigin = 'anonymous';
    img.onload = () => {
      ctx.save();
      ctx.globalAlpha = options.alpha || 1;
      ctx.globalCompositeOperation = options.blend || 'source-over';
      const scale = options.scale || 1;
      const w = img.width * scale;
      const h = img.height * scale;
      ctx.drawImage(img, (1080 - w) / 2, (1080 - h) / 2, w, h);
      ctx.restore();
    };
    img.src = src;
  };

  const applyCanvas = async () => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, 1080, 1080);

    if (showBase && baseImage)
      await drawLayer(ctx, baseImage, { alpha: alphaBase, blend: blendBase, scale: scaleBase });

    if (showText && textSvg) {
      let svgTextProcessed = textSvg;
      Object.entries(textReplacers).forEach(([key, val]) => {
        svgTextProcessed = svgTextProcessed.replaceAll(key, val);
      });
      const blob = new Blob([svgTextProcessed], { type: 'image/svg+xml' });
      const url = URL.createObjectURL(blob);
      await drawLayer(ctx, url, { alpha: alphaText, blend: blendText, scale: scaleText });
      URL.revokeObjectURL(url);
    }

    if (showOverlay && overlaySvg)
      await drawLayer(ctx, overlaySvg, { alpha: alphaOverlay, blend: blendOverlay, scale: scaleOverlay });
  };

  const exportImage = () => {
    const link = document.createElement('a');
    link.download = 'preview.png';
    link.href = canvasRef.current.toDataURL();
    link.click();
  };

  return (
    <div className="p-4 text-white">
      <h1 className="text-xl mb-4">TESTE DE CAMADAS</h1>

      <div className="grid grid-cols-3 gap-4 mb-4">
        {['base', 'text', 'overlay'].map((type) => (
          <div key={type} className="border p-2 rounded">
            <label className="block mb-2 uppercase font-bold">{type}</label>
            <input type="file" accept={type === 'text' ? '.svg' : 'image/*'} onChange={(e) => handleImageUpload(e, type)} />
            <div className="mt-2 flex flex-col gap-1">
              <label><input type="checkbox" checked={eval(`show${capitalize(type)}`)} onChange={() => eval(`setShow${capitalize(type)}(!show${capitalize(type)})`)} /> Show</label>
              <label>Blend Mode: <input type="text" value={eval(`blend${capitalize(type)}`)} onChange={(e) => eval(`setBlend${capitalize(type)}(e.target.value)`)} /></label>
              <label>TransparÃªncia: <input type="range" min={0} max={1} step={0.01} value={eval(`alpha${capitalize(type)}`)} onChange={(e) => eval(`setAlpha${capitalize(type)}(parseFloat(e.target.value))`)} /></label>
              <label>Escala: <input type="range" min={0.1} max={2} step={0.1} value={eval(`scale${capitalize(type)}`)} onChange={(e) => eval(`setScale${capitalize(type)}(parseFloat(e.target.value))`)} /></label>
            </div>
          </div>
        ))}
      </div>

      <div className="mb-4">
        <label className="block font-bold">Editar Texto</label>
        <input type="text" placeholder="ARTIST" value={textReplacers.ARTIST} onChange={(e) => setTextReplacers({ ...textReplacers, ARTIST: e.target.value })} className="mr-2" />
        <input type="text" placeholder="TITLE" value={textReplacers.TITLE} onChange={(e) => setTextReplacers({ ...textReplacers, TITLE: e.target.value })} />
      </div>

      <button onClick={applyCanvas} className="bg-blue-500 px-4 py-2 rounded text-white mr-4">Aplicar</button>
      <button onClick={exportImage} className="bg-green-500 px-4 py-2 rounded text-white">Exportar</button>

      <div className="mt-4 border">
        <canvas ref={canvasRef} width={1080} height={1080} className="w-full h-auto" />
      </div>
    </div>
  );
}

const capitalize = (s) => s.charAt(0).toUpperCase() + s.slice(1);
