// Zentraw Artist Toolkit V2.8 - Início da fase 'Layout Final' com aplicação de template SVG sobre imagem

import React, { useState, useRef, useEffect } from 'react';
import { TabsContent, TabsTrigger, TabsList, Tabs } from '@/components/ui/tabs';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

const mockTemplates = [
  {
    id: 'template1',
    name: 'Minimal',
    svg: `<svg width="1080" height="1080" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="transparent"/><text id="artistName" x="50%" y="60%" font-size="60" text-anchor="middle" fill="white" font-family="Arial">ARTIST</text><text id="songTitle" x="50%" y="70%" font-size="40" text-anchor="middle" fill="white" font-family="Arial">TITLE</text></svg>`
  },
  {
    id: 'template2',
    name: 'Bold Center',
    svg: `<svg width="1080" height="1080" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="transparent"/><text id="artistName" x="50%" y="50%" font-size="80" text-anchor="middle" fill="yellow" font-family="Impact">ARTIST</text><text id="songTitle" x="50%" y="65%" font-size="50" text-anchor="middle" fill="white" font-family="Impact">TITLE</text></svg>`
  }
];

export default function ZentrawToolkit() {
  const [selectedTemplate, setSelectedTemplate] = useState(mockTemplates[0]);
  const [blendedImage, setBlendedImage] = useState(null);
  const canvasBlendRef = useRef(null);
  const artistName = 'Nome do Artista'; // mock (substituir por formData.artistName)
  const songTitle = 'Título do Single'; // mock (substituir por formData.songTitle)

  const applyTemplate = async () => {
    const baseImg = new Image();
    baseImg.crossOrigin = 'anonymous';
    baseImg.src = blendedImage || 'https://via.placeholder.com/1080'; // substituir pelo formato exportado

    const svgWithText = selectedTemplate.svg
      .replace('ARTIST', artistName)
      .replace('TITLE', songTitle);

    const svgBlob = new Blob([svgWithText], { type: 'image/svg+xml;charset=utf-8' });
    const svgUrl = URL.createObjectURL(svgBlob);

    const svgImg = new Image();
    svgImg.src = svgUrl;
    svgImg.onload = () => {
      const canvas = canvasBlendRef.current;
      const ctx = canvas.getContext('2d');
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.drawImage(baseImg, 0, 0, 1080, 1080);
      ctx.drawImage(svgImg, 0, 0, 1080, 1080);
      URL.revokeObjectURL(svgUrl);
    };
  };

  return (
    <Tabs defaultValue="bio" className="w-full">
      <TabsList className="grid grid-cols-7 mb-6">
        <TabsTrigger value="bio">Bio</TabsTrigger>
        <TabsTrigger value="release">Release</TabsTrigger>
        <TabsTrigger value="midia">Fotos & Áudio</TabsTrigger>
        <TabsTrigger value="capa">Capa</TabsTrigger>
        <TabsTrigger value="kit">Kit Final</TabsTrigger>
        <TabsTrigger value="recentes">Recentes</TabsTrigger>
        <TabsTrigger value="layout">Layout Final</TabsTrigger>
      </TabsList>

      <TabsContent value="layout">
        <Card><CardContent className="grid gap-4 p-4">
          <h2 className="text-xl font-bold">Escolher Template de Capa</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {mockTemplates.map((tpl) => (
              <Button
                key={tpl.id}
                onClick={() => setSelectedTemplate(tpl)}
                variant={selectedTemplate.id === tpl.id ? 'default' : 'outline'}
              >
                {tpl.name}
              </Button>
            ))}
          </div>

          <h3 className="text-lg font-semibold mt-4">Preview com Template</h3>
          <canvas ref={canvasBlendRef} width={1080} height={1080} className="border rounded w-full max-w-xl" />
          <Button className="mt-4" onClick={applyTemplate}>Aplicar Template</Button>
        </CardContent></Card>
      </TabsContent>
    </Tabs>
  );
}
