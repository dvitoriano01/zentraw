// ZentrawWorkspaceLayout.tsx
import { useEffect, useRef, useState } from 'react';
import { fabric } from 'fabric';

export default function ZentrawWorkspaceLayout() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const fabricCanvas = useRef<fabric.Canvas | null>(null);
  const [activeTool, setActiveTool] = useState<'select' | 'text' | 'overlay'>('select');
  const [activeObject, setActiveObject] = useState<fabric.Object | null>(null);

  useEffect(() => {
    const canvas = new fabric.Canvas(canvasRef.current!, {
      width: 1080,
      height: 1080,
      backgroundColor: 'transparent',
      preserveObjectStacking: true
    });
    fabricCanvas.current = canvas;

    // Grade xadrez
    const patternCanvas = document.createElement('canvas');
    patternCanvas.width = patternCanvas.height = 40;
    const pctx = patternCanvas.getContext('2d')!;
    pctx.fillStyle = '#ccc';
    pctx.fillRect(0, 0, 40, 40);
    pctx.fillStyle = '#eee';
    pctx.fillRect(0, 0, 20, 20);
    pctx.fillRect(20, 20, 20, 20);
    const pattern = new fabric.Pattern({ source: patternCanvas, repeat: 'repeat' });
    canvas.setBackgroundColor(pattern, canvas.renderAll.bind(canvas));

    canvas.on('selection:created', e => setActiveObject(e.selected?.[0] || null));
    canvas.on('selection:updated', e => setActiveObject(e.selected?.[0] || null));
    canvas.on('selection:cleared', () => setActiveObject(null));

    return () => canvas.dispose();
  }, []);

  const handleAddText = () => {
    const textbox = new fabric.Textbox("Texto", {
      left: 100,
      top: 100,
      fontSize: 48,
      fill: '#000',
    });
    fabricCanvas.current?.add(textbox);
    fabricCanvas.current?.setActiveObject(textbox);
  };

  return (
    <div className="flex flex-col h-screen">
      {/* Top Bar */}
      <div className="bg-neutral-900 text-white h-10 flex items-center px-4 text-sm gap-4">
        <div className="font-bold text-purple-400">ZENTRAW TOOLKIT</div>
        <div className="hover:underline cursor-pointer">File</div>
        <div className="hover:underline cursor-pointer">Edit</div>
        <div className="hover:underline cursor-pointer">View</div>
        <div className="hover:underline cursor-pointer">Layer</div>
        <div className="hover:underline cursor-pointer">Export</div>
      </div>

      <div className="flex flex-1 overflow-hidden">
        {/* Sidebar Tools */}
        <div className="w-14 bg-neutral-800 flex flex-col items-center p-2 text-white gap-3 text-xs">
          <button onClick={() => setActiveTool('select')}>üñ±Ô∏è</button>
          <button onClick={() => { setActiveTool('text'); handleAddText(); }}>T</button>
          <button onClick={() => setActiveTool('overlay')}>üé®</button>
        </div>

        {/* Canvas area */}
        <div className="flex-1 bg-neutral-700 flex justify-center items-center relative">
          <div className="w-[1080px] h-[1080px] bg-white shadow-lg border border-neutral-400">
            <canvas ref={canvasRef} width={1080} height={1080} />
          </div>
        </div>

        {/* Properties Panel */}
        <div className="w-72 bg-neutral-900 text-white p-4 overflow-y-auto">
          <h3 className="text-sm font-semibold mb-2">Propriedades</h3>
          {activeObject ? (
            <>
              <div className="mb-2">
                <label className="text-xs">Opacidade</label>
                <input
                  type="range"
                  min="0"
                  max="1"
                  step="0.01"
                  value={activeObject.opacity || 1}
                  onChange={(e) => {
                    activeObject.set({ opacity: parseFloat(e.target.value) });
                    fabricCanvas.current?.renderAll();
                  }}
                />
              </div>
            </>
          ) : (
            <p className="text-xs text-gray-400">Selecione um objeto</p>
          )}
        </div>
      </div>
    </div>
  );
}